import pandas as pd
import numpy as np
import scipy.stats as stats
import re

mlb_df=pd.read_csv("assets/mlb.csv")
nhl_df=pd.read_csv("assets/nhl.csv")
nba_df=pd.read_csv("assets/nba.csv")
nfl_df=pd.read_csv("assets/nfl.csv")
cities=pd.read_html("assets/wikipedia_data.html")[1]
cities=cities.iloc[:-1,[0,3,5,6,7,8]]
cities=cities.rename(columns={'Population (2016 est.)[8]':'population'})

def nba_get_area(team):
    for each in list(nba_cities.index.values):
        if team in each:
            return nba_cities.at[each, 'Metropolitan area']
        
def nfl_get_area(team):
    for each in list(nfl_cities.index.values):
        if team in each:
            return nfl_cities.at[each, 'Metropolitan area']
        
def nhl_get_area(team):
    for each in list(nhl_cities.index.values):
        if team in each:
            return nhl_cities.at[each, 'Metropolitan area']

def mlb_get_area(team):
    for each in list(mlb_cities.index.values):
        if team in each:
            return mlb_cities.at[each, 'Metropolitan area']
        
def create_df(sport):
    if sport == 'NFL':
        return merge_nfl[['Win/Lost%']]
    if sport == 'NHL':
        return merge_nhl[['Win/Lost%']]
    if sport == 'MLB':
        return merge_mlb[['Win/Lost%']]
    if sport == 'NBA':
        return merge_nba[['Win/Lost%']]
    else:
        print('Error')

cities['NFL']=cities['NFL'].str.replace('\[\w.*\]','')
cities['NBA']=cities['NBA'].replace('\[\w.*\]','',regex=True)
cities['NHL']=cities['NHL'].replace('\[\w.*\]','',regex=True)
cities['MLB']=cities['MLB'].replace('\[\w.*\]','',regex=True)
    
population=cities[['Metropolitan area','population']].set_index(['Metropolitan area'])
population['population']=pd.to_numeric(population['population'])
    
mlb_cities=cities[['Metropolitan area','MLB']].set_index('MLB')
nhl_cities=cities[['Metropolitan area','NHL']].set_index('NHL')
nfl_cities=cities[['Metropolitan area','NFL']].set_index('NFL')
nba_cities=cities[['Metropolitan area','NBA']].set_index('NBA')
    
mlb_cities=mlb_cities.drop(['—',''],axis=0)
nhl_cities=nhl_cities.drop(['—',''],axis=0)
nfl_cities=nfl_cities.drop(['—',''],axis=0)
nba_cities=nba_cities.drop(['—',''],axis=0)
    
mlb_df=mlb_df[mlb_df['year']==2018]
mlb_df['W']=pd.to_numeric(mlb_df['W'])
mlb_df['L']=pd.to_numeric(mlb_df['L'])
mlb_df['Win/Lost%']=mlb_df['W']/(mlb_df['W']+mlb_df['L'])
mlb_df['area']=mlb_df['team'].apply(lambda x: x.split(' ')[-1])
mlb_df['area']=mlb_df['area'].apply(lambda x: mlb_get_area(x))
mlb_df['area'][0]='Boston'
merge_mlb=pd.merge(mlb_df,population,how='inner',left_on='area',right_on='Metropolitan area')
merge_mlb=merge_mlb.groupby('area').agg({'Win/Lost%':np.nanmean,'population':np.nanmean})
    
nhl_df=nhl_df[nhl_df['year']==2018]
nhl_df=nhl_df.drop([0,9,18,26],axis=0)
nhl_df['W']=pd.to_numeric(nhl_df['W'])
nhl_df['L']=pd.to_numeric(nhl_df['L'])
nhl_df['Win/Lost%']=nhl_df['W']/(nhl_df['W']+nhl_df['L'])
nhl_df['team']=nhl_df['team'].str.replace('*','')
nhl_df['area']=nhl_df['team'].apply(lambda x: x.split(' ')[-1])
nhl_df['area']=nhl_df['area'].apply(lambda x: nhl_get_area(x))
merge_nhl=pd.merge(nhl_df,population,how='inner',left_on='area',right_on='Metropolitan area')
merge_nhl=merge_nhl.groupby('area').agg({'Win/Lost%':np.nanmean,'population':np.nanmean})
    
nfl_df=nfl_df[nfl_df['year']==2018]
nfl_df=nfl_df.drop([0,5,10,15,20,25,30,35],axis=0)
nfl_df['W']=pd.to_numeric(nfl_df['W'])
nfl_df['L']=pd.to_numeric(nfl_df['L'])
nfl_df['Win/Lost%']=nfl_df['W']/(nfl_df['W']+nfl_df['L'])
nfl_df['team']=nfl_df['team'].str.replace('*','')
nfl_df['team']=nfl_df['team'].str.replace('+','')
nfl_df['area']=nfl_df['team'].apply(lambda x: x.split(' ')[-1])
nfl_df['area']=nfl_df['area'].apply(lambda x: nfl_get_area(x))
merge_nfl=pd.merge(nfl_df,population,how='inner',left_on='area',right_on='Metropolitan area')
merge_nfl=merge_nfl.groupby('area').agg({'Win/Lost%':np.nanmean,'population':np.nanmean})
    
nba_df=nba_df[nba_df['year']==2018]
nba_df['W']=pd.to_numeric(nba_df['W'])
nba_df['L']=pd.to_numeric(nba_df['L'])
nba_df['Win/Lost%']=nba_df['W']/(nba_df['W']+nba_df['L'])
nba_df['team']=nba_df['team'].replace('\**\s\(\d.*\)','',regex=True)
nba_df['area']=nba_df['team'].apply(lambda x: x.split(' ')[-1])
nba_df['area']=nba_df['area'].apply(lambda x: nba_get_area(x))
merge_nba=pd.merge(nba_df,population,how='inner',left_on='area',right_on='Metropolitan area')
merge_nba=merge_nba.groupby('area').agg({'Win/Lost%':np.nanmean,'population':np.nanmean})        
        
def sports_team_performance():
    # YOUR CODE HERE
    #raise NotImplementedError()
    
    
    
    
    # Note: p_values is a full dataframe, so df.loc["NFL","NBA"] should be the same as df.loc["NBA","NFL"] and
    # df.loc["NFL","NFL"] should return np.nan
    sports = ['NFL', 'NBA', 'NHL', 'MLB']
    p_values = pd.DataFrame({k:np.nan for k in sports}, index=sports)
    
    for i in sports:
        for j in sports:
            if i!=j:
                merge_final=pd.merge(create_df(i),create_df(j),how='inner',on='area')
                p_values.loc[i,j]=stats.ttest_rel(merge_final['Win/Lost%_x'],merge_final['Win/Lost%_y'])[1]
    
    assert abs(p_values.loc["NBA", "NHL"] - 0.02) <= 1e-2, "The NBA-NHL p-value should be around 0.02"
    assert abs(p_values.loc["MLB", "NFL"] - 0.80) <= 1e-2, "The MLB-NFL p-value should be around 0.80"
    return p_values
